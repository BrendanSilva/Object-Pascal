program htmlmos;
{$APPTYPE CONSOLE}

{
------------------------------------------------------------------------------

                                 HTMLMOS v1.3
                                 ============
                 A very basic tool to create mosaics in HTML
                     Written by Brendan Silva - 2021~2022

                       https://github.com/BrendanSilva

                   https://archive.org/details/@brendansilva

              https://youtube.com/channel/UCYi8iNEIRKAh76Gjb62nDDA

This  program is free software: you can redistribute it and/or modify it under
the  terms of the GNU General Public License as published by the Free Software
Foundation,  either  version  3 of the License. This program is distributed in
the  hope  that  it will be useful, but without any warranty; without even the
implied  warranty  of merchantability or fitness for a particular purpose. See
the GNU General Public License for more details.

                                   English:
                                   ========

     This software uses colored block characters to create mosaics on HTML
       pages. Source code is included. I recommend using small pictures.

All  my  software  is free (and open source) and always will be. Thank you for
using  this  software!  This encourages me to improve it more and more. If you
would  like  to consider a little donation as an incentive, you can donate via

             Bitcoin: bc1qyctqutnah9v90hwufk9eqaxvze7k5rtvrtvpr7

                         Pix: brendan.edicao@gmail.com

                  I appreciate your help. Thanks in advance.


                                 Português-BR:
                                 =============

      Usando caracteres de blocos coloridos, esse programa (contém o
           código-fonte) cria pequenos mosaicos em páginas HTML.
                         Utilize imagens pequenas.

     Se você é brasileiro e gostaria de apoiar o meu trabalho, pode fazer,
         se quiser, uma pequena doação de qualquer valor através do:

             Bitcoin: bc1qyctqutnah9v90hwufk9eqaxvze7k5rtvrtvpr7

                         Pix: brendan.edicao@gmail.com

                               Muito obrigado.

------------------------------------------------------------------------------
}

uses
  Classes, Graphics, Math, SysUtils, Windows;

const
  HexString : ShortString = '0123456789ABCDEF';
  SpanStyle : Array [0..1] of ShortString = ('background-color:#', 'color:#');

var
  BmpInput            : Graphics.TBitmap;
  BmpScale, C, N, Q   : Byte;
  Closing, F, UseJS   : Boolean;
  H, I, W, X          : Word;
  HtmBuffer, Palette  : String;
  HtmSeek, PalSeek    : Integer;
  ShortBuffer         : ShortString;
  StdinBitmap         : TMemoryStream;

  PseudoJS            : Array of Cardinal;
  PseudoPal           : Array of Word;

  BmpPixels           : Array [0..1] of PByteArray;
  DefCol              : Array [0..1] of Cardinal;
  HTagColor           : Array [0..1] of ShortString;
  JTagColor           : Array [0..1] of Word;
  Px                  : Array [0..2] of Byte;
  Rx                  : Array [0..3] of Integer;
  Tag                 : Array [0..1] of Byte;

{------------------------------------------------------------------------------}

function  Inv(Value : Cardinal): Cardinal; begin Result := ((Value and 255) shl 16) or (Value and 65280) or ((Value shr 16) and 255); end;
function  SetStretchBltMode(DC: LongWord; StretchMode: Integer): Integer; stdcall; external 'gdi32.dll';
procedure Merge(SAppend : String; var SSource : String; var SSeek : Integer; SLength : Integer); var L : Integer; begin for L := 1 to SLength do SSource[SSeek + L] := SAppend[L]; SSeek := SSeek + SLength; end;

{------------------------------------------------------------------------------}

function GetBitmapFromStdin : Boolean;
var
  StdinHandle : THandleStream;
  StdinRead   : Word;
  StdinBuffer : Array [0..65534] of Byte;
begin
  StdinBitmap := TMemoryStream.Create;
  StdinHandle := THandleStream.Create(GetStdHandle(STD_INPUT_HANDLE));
  StdinHandle.Seek(0, 0);
  try
    repeat
      StdinRead := StdinHandle.Read(StdinBuffer, 65535);
      if StdinRead > 0 then StdinBitmap.Write(StdinBuffer, StdinRead);
    until StdinRead = 0;
    StdinBitmap.Position := 0;
    Result := True;
  except
    StdinBitmap.Free;
    Result := False;
  end;
  StdinHandle.Free;
end;

{------------------------------------------------------------------------------}

procedure JSCodify();
var
  DI, DS, DC : Cardinal;
begin
  DC := 0;
  DefCol[1] := 1 shl 28;
  for DI := 0 to Length(PseudoJS) - 1 do
  begin
    DefCol[0] := DefCol[1];
    DefCol[1] := PseudoJS[DI];
    if DefCol[0] = DefCol[1] then Inc(DC) else
    begin
      ShortBuffer := '';
      case DefCol[0] shr 24 of
        0: if DC < 5 then for DS := 0 to DC do ShortBuffer := ShortBuffer + 'w();' else ShortBuffer := 'for(r=0;r<' + IntToStr(DC + 1) + ';r++)w();';
        1: if DC < 3 then for DS := 0 to DC do ShortBuffer := ShortBuffer + 'f(p[' + IntToStr(DefCol[0] and 4095) + ']);' else ShortBuffer := 'for(r=0;r<' + IntToStr(DC + 1) + ';r++)f(p[' + IntToStr(DefCol[0] and 4095) + ']);';
        2: if DC < 3 then for DS := 0 to DC do ShortBuffer := ShortBuffer + 'b(p[' + IntToStr((DefCol[0] shr 12) and 4095) + ']);' else ShortBuffer := 'for(r=0;r<' + IntToStr(DC + 1) + ';r++)b(p[' + IntToStr((DefCol[0] shr 12) and 4095) + ']);';
        3: if DC < 2 then for DS := 0 to DC do ShortBuffer := ShortBuffer + 'd(p[' + IntToStr((DefCol[0] shr 12) and 4095) + '],p[' + IntToStr(DefCol[0] and 4095) + ']);' else ShortBuffer := 'for(r=0;r<' + IntToStr(DC + 1) + ';r++)d(p[' + IntToStr((DefCol[0] shr 12) and 4095) + '],p[' + IntToStr(DefCol[0] and 4095) + ']);';
        4: ShortBuffer := 'l();';
      end;
      DC := 0;
      Merge(ShortBuffer, HtmBuffer, HtmSeek, Length(ShortBuffer));
    end;
  end;
end;

{------------------------------------------------------------------------------}

begin

  if ParamStr(1) = '' then
  begin
    WriteLn(
        #10 + 'HTMLMOS v1.3 - Freeware and open source'
      + #10 + '======================================='
      + #10
      + #10 + '  A basic tool to create mosaics in HTML.'
      + #10 + '  Brendan Silva - youtube.com/channel/UCYi8iNEIRKAh76Gjb62nDDA'
      + #10
      + #10 + '  The source code is available at:'
      + #10 + '    https://github.com/BrendanSilva'
      + #10 + '    https://archive.org/details/@brendansilva'
      + #10
      + #10 + '  Syntax:'
      + #10 + '    HTMLMOS "File.BMP|*" [-js|[Quality]] [Resize(%)] [Pg. Color] [Canvas Color]'
      + #10
      + #10 + '  E.g.:'
      + #10 + '    HTMLMOS.EXE pizza.bmp 2 10 #FEEDED > hungry.htm'
      + #10 + '    HTMLMOS.EXE coffee.bmp -js 25 $DECAF > break.html'
      + #10
      + #10 + '  Retrieving the standard input (*):'
      + #10
      + #10 + '    HTMLMOS.EXE * -js . . #F1D6E7 < spin_input.bmp > output.html'
      + #10
      + #10 + '    type input.bmp | HTMLMOS.EXE * 4 . . . "--- Page Title ---" > output.htm'
      + #10
      + #10 + '    magick convert in.jpg -posterize 16 BMP:- | HTMLMOS.EXE * -js > out.htm'
      + #10
      + #10 + '    @(ffmpeg -i in.webp -c:v bmp -vf scale=150:-2 -f image2 -pix_fmt bgr24 -'
      + #10 + '    )| HTMLMOS.EXE * -js . . . "%date% %time:~0,-3%" > "output.html'
      + #10
      + #10 + '  Notes:'
      + #10 + '    1. Quality is a number between 1 and 8. This number is inversely'
      + #10 + '       proportional to the final size of the html file.'
      + #10
      + #10 + '    2. The "-js" parameter will embed JavaScript. This method creates a'
      + #10 + '       pseudo-palette to make the output file smaller. The output code is'
      + #10 + '       compatible with any browser.'
      + #10
      + #10 + '    3. Numeric entries can be: zero (0); a positive integer; a hexadecimal'
      + #10 + '       number preceded by "$" or "#". An entry preceded by "#" meets'
      + #10 + '       hexadecimal HTML notation. The precedence of "$" means that the'
      + #10 + '       hexadecimal input is an unsigned 3-byte integer value (commonly used'
      + #10 + '       by graphic editors). Do not use colors with alpha values.'
      + #10
      + #10 + '    4. Canvas and page colors are optional. When the default value for the'
      + #10 + '       canvas color is set, redundant assignments of the same color to the'
      + #10 + '       span element will be ignored.'
      + #10
      + #10 + '    5. All my software is free (and open source) and always will be. Thank'
      + #10 + '       you for using this software! This encourages me to improve it more'
      + #10 + '       and more. If you would like to consider a little donation as an'
      + #10 + '       incentive, you can use the Pix: brendan.edicao@gmail.com'
      + #10 + '       I appreciate your help. Thanks in advance!'
      );
    Halt(1);
  end
  else
  begin
    if FileExists(ParamStr(1)) then F := True else if (ParamStr(1) = '*') then F := False else Halt(2);
    BmpInput := Graphics.TBitmap.Create;
    try
      if F then BmpInput.LoadFromFile(ParamStr(1)) else if GetBitmapFromStdin then begin BmpInput.LoadFromStream(StdinBitmap); StdinBitmap.Free; end else Abort;
    except
      BmpInput.Free;
      Halt(3);
    end;
  end;

{------------------------------------------------------------------------------}

  if Lowercase(ParamStr(2)) = '-js' then UseJS := True else UseJS := False;
  Closing   := True;
  BmpScale  := StrToIntDef(ParamStr(3), 100);
  DefCol[0] := $FFFFFF;
  DefCol[1] := $FFFFFF;
  C := Min(Max(StrToIntDef(ParamStr(2),1), 1), 8) - 1;
  Q := (255 shr C) shl C;
  X := 0;
  for C := 0 to 3 do Rx[C] := -1;
  for C := 0 to 1 do if ParamStr(4 + C) <> '' then if ParamStr(4 + C)[1] = '#' then DefCol[C] := Inv(StrToIntDef('$' + Copy(ParamStr(4 + C), 2, 10), 0)) else DefCol[C] := StrToIntDef(ParamStr(4 + C), 0);
  BmpInput.PixelFormat := pf24bit; // <-- This variable has already been initialized on line 212.
  BmpInput.Canvas.Brush.Color := DefCol[1];

{------------------------------------------------------------------------------}

  if (BmpScale > 0) and (BmpScale < 100) then
  begin
    SetStretchBltMode(BmpInput.Canvas.Handle, 4);
    W := Round(BmpInput.Width  /100 * BmpScale);
    H := Round(BmpInput.Height /100 * BmpScale);
    BmpInput.Canvas.CopyRect(Rect(0, 0, W, H), BmpInput.Canvas, BmpInput.Canvas.ClipRect);
    BmpInput.Width  := Max(1, W);
    BmpInput.Height := Max(2, H);
  end;

{------------------------------------------------------------------------------}

  HtmBuffer := '';
  HtmSeek   := 0;
  BmpInput.Height := BmpInput.Height + BmpInput.Height and 1;
  if UseJS then
  begin
    Palette := '';
    PalSeek := 0;
    SetLength(Palette,   $9000);
    SetLength(PseudoPal, $1000);
    SetLength(PseudoJS, (BmpInput.Width + 1) * (BmpInput.Height div 2) + 2);
    SetLength(HtmBuffer, BmpInput.Width * BmpInput.Height * 19 + BmpInput.Height * 4);
    Merge('var p = [', Palette, PalSeek, 9); // <-- IE don't support 'const'
  end
  else SetLength(HtmBuffer, BmpInput.Width * BmpInput.Height * 68 + BmpInput.Height * 4);

{------------------------------------------------------------------------------}

  Write(
            '<!DOCTYPE html>'
    + #10 + '<html>'
    + #10 + '<head>'
    + #10 + '<meta name="author" content="Generated with HTMLMOS v1.3 - archive.org/details/htmlmos12">'
    + #10 + '<title>' + StringReplace(ExtractFileName(ParamStr(1)), '*', '', [rfReplaceAll]) + ParamStr(6) + '</title>'
    + #10 + '</head>'
    + #10 + '<body style="background-color:#' + IntToHex(Inv(DefCol[0]),6) + '">'
    + #10 + '<div style="background-color:#'  + IntToHex(Inv(DefCol[1]),6) + ';color:#' + IntToHex(Inv(DefCol[1]),6) + ';float:left;display:inline-block;font-family:Courier;font-size:8px;">' // line-height:1.2;
  );
  if not UseJS then Write('<span>');
  WriteLn;

{------------------------------------------------------------------------------}

  for H := 0 to BmpInput.Height div 2 - 1 do
  begin
    BmpPixels[0] := BmpInput.ScanLine[H * 2];
    BmpPixels[1] := BmpInput.ScanLine[H * 2 + 1];
    for W := 0 to BmpInput.Width - 1 do
    begin
      for N := 0 to 1 do
      begin
        if not UseJS then
        begin
          HTagColor[N] := '';
          for C := 0 to 2 do BmpPixels[N][W * 3 + C] := BmpPixels[N][W * 3 + C] and Q;
        end;
        Rx[N shl 1] := Rx[N shl 1 + 1];
        Rx[N shl 1 + 1] := ((BmpPixels[N][W * 3] shl 16) or (BmpPixels[N][W * 3 + 1] shl 8) or BmpPixels[N][W * 3 + 2]);
        if Rx[N shl 1 + 1] = DefCol[1] then Tag[N] := 0 else // <-- Comparing signed and unsigned types here is purposeful.
        begin
          Tag[N] := 1;
          if UseJS then
          begin
            for C := 0 to 2 do Px[C] := Trunc(BmpPixels[N][W * 3 + C]/17) + (Trunc(Frac(BmpPixels[N][W * 3 + C]/17) * 10) div 5) and ((W + N) and 1);
            I := (Px[0] shl 8) or (Px[1] shl 4) or Px[2];
            if PseudoPal[I] = 0 then
            begin
              Inc(X);
              PseudoPal[I] := X;
              ShortBuffer := '"';
              for C := 2 downto 0 do ShortBuffer := ShortBuffer + HexString[(Px[C] * 17) shr 4 + 1] + HexString[(Px[C] * 17) and 15 + 1];
              ShortBuffer := ShortBuffer + '",';
              Merge(ShortBuffer, Palette, PalSeek, 9);
            end;
            JTagColor[N] := PseudoPal[I] - 1;
          end
          else
          begin
            for C := 2 downto 0 do
            begin
              Px[0] := BmpPixels[N][W * 3 + C];
              HTagColor[N] := HTagColor[N] + HexString[Px[0] shr 4 + 1] + HexString[Px[0] and 15 + 1];
            end;
          end;
        end;
      end;
      if UseJS then
      begin
        case Tag[0] shl 1 or Tag[1] of
          0: PseudoJS[H * BmpInput.Width + H + W] := 0;
          1: PseudoJS[H * BmpInput.Width + H + W] := JTagColor[1] or 1 shl 24;
          2: PseudoJS[H * BmpInput.Width + H + W] := JTagColor[0] shl 12 or 1 shl 25;
          3: PseudoJS[H * BmpInput.Width + H + W] := JTagColor[0] shl 12 or JTagColor[1] or 3 shl 24;
        end;
      end
      else
      begin
        if Tag[0] or Tag[1] = 1 then
        begin
          if (Rx[0] <> Rx[1]) or (Rx[2] <> Rx[3]) then
          begin
            if Closing then ShortBuffer := '</span><span style="' else ShortBuffer := '<span style="';
            for N := 0 to 1 do if Tag[N] = 1 then ShortBuffer := ShortBuffer + SpanStyle[N] + HTagColor[N] + ';';
            ShortBuffer := ShortBuffer + '">';
            Merge(ShortBuffer, HtmBuffer, HtmSeek, Length(ShortBuffer));
            Closing := True;
          end;
          Merge('&#9604;', HtmBuffer, HtmSeek, 7);
        end
        else
        begin
          if Closing then
          begin
            Merge('</span>', HtmBuffer, HtmSeek, 7);
            Closing := False;
          end;
          Merge('&#9604;', HtmBuffer, HtmSeek, 7);
        end;
      end;
    end;
    if UseJS then PseudoJS[(H + 1) * BmpInput.Width + H] := 1 shl 26 else Merge('<br>', HtmBuffer, HtmSeek, 4);
  end;

{------------------------------------------------------------------------------}

  if UseJS then
  begin
    SetLength(Palette, PalSeek);
    WriteLn(
              '<script type="text/javascript">'
      + #10 + Palette + ']'
      + #10 + 'var x = "";'
      + #10 + 'var y = "";'
      + #10 + 'function l() {document.write("<br>")}'
      + #10 + 'function w() {document.write("&#9604;")}'
      + #10 + 'function f(x) {document.write("<span style=\"color:#" + x + ";\">&#9604;</span>")}'
      + #10 + 'function b(x) {document.write("<span style=\"background-color:#" + x + ";\">&#9604;</span>")}'
      + #10 + 'function d(x,y) {document.write("<span style=\"background-color:#" + x + ";color:#" + y + ";\">&#9604;</span>")}'
    );
    JSCodify();
  end;

{------------------------------------------------------------------------------}

  SetLength(HtmBuffer, HtmSeek);
  WriteLn(HtmBuffer);
  if UseJS then WriteLn('</script>') else WriteLn('</span>');
  WriteLn('</div>' + #10 + '</body>' + #10 + '</html>');

{------------------------------------------------------------------------------}

  BmpInput.Free;
  ExitCode := 0;

end.
